{
  "hash": "81f53263c9a7798e019cee0d817ed4dd",
  "result": {
    "markdown": "---\ntitle: <b>ARM and Networking</b>\nformat:\n  html:\n    theme: lumen\n    toc: true\n    self-contained: true\n    embed-resources: true\n    page-layout: full\n    code-fold: true\n    code-tools: true\n---\n\n# Import Libraries\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom apyori import apriori\nimport networkx as nx \nimport netgraph\nimport plotly.graph_objects as go\nsns.set_theme(style=\"whitegrid\", palette='Set2')\nimport warnings\nwarnings.filterwarnings('ignore')\n%matplotlib inline\n```\n:::\n\n\n# Import Data\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf = pd.read_csv('../../data/02-model-data/data_cleaned.csv')\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>round</th>\n      <th>season_round</th>\n      <th>driverId</th>\n      <th>raceId</th>\n      <th>circuitId</th>\n      <th>position</th>\n      <th>points</th>\n      <th>grid</th>\n      <th>laps</th>\n      <th>...</th>\n      <th>weather</th>\n      <th>stop</th>\n      <th>age_on_race</th>\n      <th>cumulative_points</th>\n      <th>cumulative_laps</th>\n      <th>pole_driverId</th>\n      <th>pole_history</th>\n      <th>win_driverId</th>\n      <th>win_history</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>1950_1</td>\n      <td>642</td>\n      <td>833</td>\n      <td>9</td>\n      <td>1</td>\n      <td>9.0</td>\n      <td>1</td>\n      <td>70</td>\n      <td>...</td>\n      <td>Fine</td>\n      <td>Not Available</td>\n      <td>44</td>\n      <td>9.0</td>\n      <td>70</td>\n      <td>642</td>\n      <td>1</td>\n      <td>642</td>\n      <td>1</td>\n      <td>Podium</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>1950_1</td>\n      <td>786</td>\n      <td>833</td>\n      <td>9</td>\n      <td>2</td>\n      <td>6.0</td>\n      <td>2</td>\n      <td>70</td>\n      <td>...</td>\n      <td>Fine</td>\n      <td>Not Available</td>\n      <td>52</td>\n      <td>6.0</td>\n      <td>70</td>\n      <td>642</td>\n      <td>0</td>\n      <td>642</td>\n      <td>0</td>\n      <td>Podium</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>1950_1</td>\n      <td>686</td>\n      <td>833</td>\n      <td>9</td>\n      <td>3</td>\n      <td>4.0</td>\n      <td>4</td>\n      <td>70</td>\n      <td>...</td>\n      <td>Fine</td>\n      <td>Not Available</td>\n      <td>39</td>\n      <td>4.0</td>\n      <td>70</td>\n      <td>642</td>\n      <td>0</td>\n      <td>642</td>\n      <td>0</td>\n      <td>Podium</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>1950_1</td>\n      <td>704</td>\n      <td>833</td>\n      <td>9</td>\n      <td>4</td>\n      <td>3.0</td>\n      <td>6</td>\n      <td>68</td>\n      <td>...</td>\n      <td>Fine</td>\n      <td>Not Available</td>\n      <td>46</td>\n      <td>3.0</td>\n      <td>68</td>\n      <td>642</td>\n      <td>0</td>\n      <td>642</td>\n      <td>0</td>\n      <td>Top_10</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>1950_1</td>\n      <td>627</td>\n      <td>833</td>\n      <td>9</td>\n      <td>5</td>\n      <td>2.0</td>\n      <td>9</td>\n      <td>68</td>\n      <td>...</td>\n      <td>Fine</td>\n      <td>Not Available</td>\n      <td>45</td>\n      <td>2.0</td>\n      <td>68</td>\n      <td>642</td>\n      <td>0</td>\n      <td>642</td>\n      <td>0</td>\n      <td>Top_10</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 22 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndriver_df = pd.read_csv('../../data/00-raw-data/drivers.csv')\ndriver_df.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>driverId</th>\n      <th>driverRef</th>\n      <th>number</th>\n      <th>code</th>\n      <th>forename</th>\n      <th>surname</th>\n      <th>dob</th>\n      <th>nationality</th>\n      <th>url</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>hamilton</td>\n      <td>44</td>\n      <td>HAM</td>\n      <td>Lewis</td>\n      <td>Hamilton</td>\n      <td>1985-01-07</td>\n      <td>British</td>\n      <td>http://en.wikipedia.org/wiki/Lewis_Hamilton</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>heidfeld</td>\n      <td>\\N</td>\n      <td>HEI</td>\n      <td>Nick</td>\n      <td>Heidfeld</td>\n      <td>1977-05-10</td>\n      <td>German</td>\n      <td>http://en.wikipedia.org/wiki/Nick_Heidfeld</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>rosberg</td>\n      <td>6</td>\n      <td>ROS</td>\n      <td>Nico</td>\n      <td>Rosberg</td>\n      <td>1985-06-27</td>\n      <td>German</td>\n      <td>http://en.wikipedia.org/wiki/Nico_Rosberg</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>alonso</td>\n      <td>14</td>\n      <td>ALO</td>\n      <td>Fernando</td>\n      <td>Alonso</td>\n      <td>1981-07-29</td>\n      <td>Spanish</td>\n      <td>http://en.wikipedia.org/wiki/Fernando_Alonso</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>kovalainen</td>\n      <td>\\N</td>\n      <td>KOV</td>\n      <td>Heikki</td>\n      <td>Kovalainen</td>\n      <td>1981-10-19</td>\n      <td>Finnish</td>\n      <td>http://en.wikipedia.org/wiki/Heikki_Kovalainen</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndf = pd.merge(df, driver_df[['driverId', 'driverRef']], on='driverId', how='left')\ndriver_df.rename(columns={'driverId':'pole_driverId'}, inplace=True)\ndf = pd.merge(df, driver_df[['pole_driverId', 'driverRef']], on='pole_driverId', how='left')\ndriver_df.rename(columns={'pole_driverId':'win_driverId'}, inplace=True)\ndf = pd.merge(df, driver_df[['win_driverId', 'driverRef']], on='win_driverId', how='left')\ndf.rename(columns={'driverRef_x':'driverRef', 'driverRef_y':'pole_driverRef', 'driverRef':'win_driverRef'}, inplace=True)\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>round</th>\n      <th>season_round</th>\n      <th>driverId</th>\n      <th>raceId</th>\n      <th>circuitId</th>\n      <th>position</th>\n      <th>points</th>\n      <th>grid</th>\n      <th>laps</th>\n      <th>...</th>\n      <th>cumulative_points</th>\n      <th>cumulative_laps</th>\n      <th>pole_driverId</th>\n      <th>pole_history</th>\n      <th>win_driverId</th>\n      <th>win_history</th>\n      <th>label</th>\n      <th>driverRef</th>\n      <th>pole_driverRef</th>\n      <th>win_driverRef</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>1950_1</td>\n      <td>642</td>\n      <td>833</td>\n      <td>9</td>\n      <td>1</td>\n      <td>9.0</td>\n      <td>1</td>\n      <td>70</td>\n      <td>...</td>\n      <td>9.0</td>\n      <td>70</td>\n      <td>642</td>\n      <td>1</td>\n      <td>642</td>\n      <td>1</td>\n      <td>Podium</td>\n      <td>farina</td>\n      <td>farina</td>\n      <td>farina</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>1950_1</td>\n      <td>786</td>\n      <td>833</td>\n      <td>9</td>\n      <td>2</td>\n      <td>6.0</td>\n      <td>2</td>\n      <td>70</td>\n      <td>...</td>\n      <td>6.0</td>\n      <td>70</td>\n      <td>642</td>\n      <td>0</td>\n      <td>642</td>\n      <td>0</td>\n      <td>Podium</td>\n      <td>fagioli</td>\n      <td>farina</td>\n      <td>farina</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>1950_1</td>\n      <td>686</td>\n      <td>833</td>\n      <td>9</td>\n      <td>3</td>\n      <td>4.0</td>\n      <td>4</td>\n      <td>70</td>\n      <td>...</td>\n      <td>4.0</td>\n      <td>70</td>\n      <td>642</td>\n      <td>0</td>\n      <td>642</td>\n      <td>0</td>\n      <td>Podium</td>\n      <td>reg_parnell</td>\n      <td>farina</td>\n      <td>farina</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>1950_1</td>\n      <td>704</td>\n      <td>833</td>\n      <td>9</td>\n      <td>4</td>\n      <td>3.0</td>\n      <td>6</td>\n      <td>68</td>\n      <td>...</td>\n      <td>3.0</td>\n      <td>68</td>\n      <td>642</td>\n      <td>0</td>\n      <td>642</td>\n      <td>0</td>\n      <td>Top_10</td>\n      <td>cabantous</td>\n      <td>farina</td>\n      <td>farina</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>1950_1</td>\n      <td>627</td>\n      <td>833</td>\n      <td>9</td>\n      <td>5</td>\n      <td>2.0</td>\n      <td>9</td>\n      <td>68</td>\n      <td>...</td>\n      <td>2.0</td>\n      <td>68</td>\n      <td>642</td>\n      <td>0</td>\n      <td>642</td>\n      <td>0</td>\n      <td>Top_10</td>\n      <td>rosier</td>\n      <td>farina</td>\n      <td>farina</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 25 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nIndex(['season', 'round', 'season_round', 'driverId', 'raceId', 'circuitId',\n       'position', 'points', 'grid', 'laps', 'status', 'constructorRef',\n       'weather', 'stop', 'age_on_race', 'cumulative_points',\n       'cumulative_laps', 'pole_driverId', 'pole_history', 'win_driverId',\n       'win_history', 'label', 'driverRef', 'pole_driverRef', 'win_driverRef'],\n      dtype='object')\n```\n:::\n:::\n\n\n# Data Pre-Processing\n- Taking our Record Cleaned Data from earlier stages, data preprocessing steps need to be performed.\n- Some of them are:\n    - Drop unnecessary columns.\n    - Taking data from years 2016-2021.\n    - Converting all columns to characters since we need texts to make a transaction data.\n    - Finally converting our pandas dataframe to a transactional database (nested list data).\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf.drop(['season_round', 'driverId', 'pole_driverId', 'win_driverId'], axis=1, inplace=True)\ndf.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>round</th>\n      <th>raceId</th>\n      <th>circuitId</th>\n      <th>position</th>\n      <th>points</th>\n      <th>grid</th>\n      <th>laps</th>\n      <th>status</th>\n      <th>constructorRef</th>\n      <th>...</th>\n      <th>stop</th>\n      <th>age_on_race</th>\n      <th>cumulative_points</th>\n      <th>cumulative_laps</th>\n      <th>pole_history</th>\n      <th>win_history</th>\n      <th>label</th>\n      <th>driverRef</th>\n      <th>pole_driverRef</th>\n      <th>win_driverRef</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>833</td>\n      <td>9</td>\n      <td>1</td>\n      <td>9.0</td>\n      <td>1</td>\n      <td>70</td>\n      <td>Finished</td>\n      <td>alfa</td>\n      <td>...</td>\n      <td>Not Available</td>\n      <td>44</td>\n      <td>9.0</td>\n      <td>70</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Podium</td>\n      <td>farina</td>\n      <td>farina</td>\n      <td>farina</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>833</td>\n      <td>9</td>\n      <td>2</td>\n      <td>6.0</td>\n      <td>2</td>\n      <td>70</td>\n      <td>Finished</td>\n      <td>alfa</td>\n      <td>...</td>\n      <td>Not Available</td>\n      <td>52</td>\n      <td>6.0</td>\n      <td>70</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Podium</td>\n      <td>fagioli</td>\n      <td>farina</td>\n      <td>farina</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>833</td>\n      <td>9</td>\n      <td>3</td>\n      <td>4.0</td>\n      <td>4</td>\n      <td>70</td>\n      <td>Finished</td>\n      <td>alfa</td>\n      <td>...</td>\n      <td>Not Available</td>\n      <td>39</td>\n      <td>4.0</td>\n      <td>70</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Podium</td>\n      <td>reg_parnell</td>\n      <td>farina</td>\n      <td>farina</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>833</td>\n      <td>9</td>\n      <td>4</td>\n      <td>3.0</td>\n      <td>6</td>\n      <td>68</td>\n      <td>Lapped</td>\n      <td>lago</td>\n      <td>...</td>\n      <td>Not Available</td>\n      <td>46</td>\n      <td>3.0</td>\n      <td>68</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Top_10</td>\n      <td>cabantous</td>\n      <td>farina</td>\n      <td>farina</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1950</td>\n      <td>1</td>\n      <td>833</td>\n      <td>9</td>\n      <td>5</td>\n      <td>2.0</td>\n      <td>9</td>\n      <td>68</td>\n      <td>Lapped</td>\n      <td>lago</td>\n      <td>...</td>\n      <td>Not Available</td>\n      <td>45</td>\n      <td>2.0</td>\n      <td>68</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Top_10</td>\n      <td>rosier</td>\n      <td>farina</td>\n      <td>farina</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 21 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf = df[df['season'] != 2022]\n```\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf = df[df['season'] > 2015]\n```\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf.reset_index(drop=True, inplace=True)\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>season</th>\n      <th>round</th>\n      <th>raceId</th>\n      <th>circuitId</th>\n      <th>position</th>\n      <th>points</th>\n      <th>grid</th>\n      <th>laps</th>\n      <th>status</th>\n      <th>constructorRef</th>\n      <th>...</th>\n      <th>stop</th>\n      <th>age_on_race</th>\n      <th>cumulative_points</th>\n      <th>cumulative_laps</th>\n      <th>pole_history</th>\n      <th>win_history</th>\n      <th>label</th>\n      <th>driverRef</th>\n      <th>pole_driverRef</th>\n      <th>win_driverRef</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2016</td>\n      <td>1</td>\n      <td>948</td>\n      <td>1</td>\n      <td>1</td>\n      <td>25.0</td>\n      <td>2</td>\n      <td>57</td>\n      <td>Finished</td>\n      <td>mercedes</td>\n      <td>...</td>\n      <td>Two</td>\n      <td>31</td>\n      <td>1234.5</td>\n      <td>10014</td>\n      <td>22</td>\n      <td>15</td>\n      <td>Podium</td>\n      <td>rosberg</td>\n      <td>hamilton</td>\n      <td>rosberg</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2016</td>\n      <td>1</td>\n      <td>948</td>\n      <td>1</td>\n      <td>2</td>\n      <td>18.0</td>\n      <td>1</td>\n      <td>57</td>\n      <td>Finished</td>\n      <td>mercedes</td>\n      <td>...</td>\n      <td>Two</td>\n      <td>31</td>\n      <td>1885.0</td>\n      <td>9375</td>\n      <td>50</td>\n      <td>43</td>\n      <td>Podium</td>\n      <td>hamilton</td>\n      <td>hamilton</td>\n      <td>rosberg</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2016</td>\n      <td>1</td>\n      <td>948</td>\n      <td>1</td>\n      <td>3</td>\n      <td>15.0</td>\n      <td>3</td>\n      <td>57</td>\n      <td>Finished</td>\n      <td>ferrari</td>\n      <td>...</td>\n      <td>Three</td>\n      <td>29</td>\n      <td>1911.0</td>\n      <td>8633</td>\n      <td>46</td>\n      <td>42</td>\n      <td>Podium</td>\n      <td>vettel</td>\n      <td>hamilton</td>\n      <td>rosberg</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2016</td>\n      <td>1</td>\n      <td>948</td>\n      <td>1</td>\n      <td>4</td>\n      <td>12.0</td>\n      <td>8</td>\n      <td>57</td>\n      <td>Finished</td>\n      <td>red_bull</td>\n      <td>...</td>\n      <td>Three</td>\n      <td>27</td>\n      <td>372.0</td>\n      <td>5007</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Top_10</td>\n      <td>ricciardo</td>\n      <td>hamilton</td>\n      <td>rosberg</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2016</td>\n      <td>1</td>\n      <td>948</td>\n      <td>1</td>\n      <td>5</td>\n      <td>10.0</td>\n      <td>6</td>\n      <td>57</td>\n      <td>Finished</td>\n      <td>williams</td>\n      <td>...</td>\n      <td>Two</td>\n      <td>35</td>\n      <td>1081.0</td>\n      <td>12729</td>\n      <td>16</td>\n      <td>11</td>\n      <td>Top_10</td>\n      <td>massa</td>\n      <td>hamilton</td>\n      <td>rosberg</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2477</th>\n      <td>2021</td>\n      <td>22</td>\n      <td>1073</td>\n      <td>24</td>\n      <td>16</td>\n      <td>0.0</td>\n      <td>16</td>\n      <td>50</td>\n      <td>Accident</td>\n      <td>williams</td>\n      <td>...</td>\n      <td>One</td>\n      <td>26</td>\n      <td>7.0</td>\n      <td>2106</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Outside_Top_10</td>\n      <td>latifi</td>\n      <td>max_verstappen</td>\n      <td>max_verstappen</td>\n    </tr>\n    <tr>\n      <th>2478</th>\n      <td>2021</td>\n      <td>22</td>\n      <td>1073</td>\n      <td>24</td>\n      <td>17</td>\n      <td>0.0</td>\n      <td>14</td>\n      <td>33</td>\n      <td>Mechanical_Issue</td>\n      <td>alfa</td>\n      <td>...</td>\n      <td>One</td>\n      <td>28</td>\n      <td>21.0</td>\n      <td>3416</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Outside_Top_10</td>\n      <td>giovinazzi</td>\n      <td>max_verstappen</td>\n      <td>max_verstappen</td>\n    </tr>\n    <tr>\n      <th>2479</th>\n      <td>2021</td>\n      <td>22</td>\n      <td>1073</td>\n      <td>24</td>\n      <td>18</td>\n      <td>0.0</td>\n      <td>17</td>\n      <td>26</td>\n      <td>Mechanical_Issue</td>\n      <td>williams</td>\n      <td>...</td>\n      <td>Not Available</td>\n      <td>23</td>\n      <td>19.0</td>\n      <td>3233</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Outside_Top_10</td>\n      <td>russell</td>\n      <td>max_verstappen</td>\n      <td>max_verstappen</td>\n    </tr>\n    <tr>\n      <th>2480</th>\n      <td>2021</td>\n      <td>22</td>\n      <td>1073</td>\n      <td>24</td>\n      <td>19</td>\n      <td>0.0</td>\n      <td>18</td>\n      <td>25</td>\n      <td>Mechanical_Issue</td>\n      <td>alfa</td>\n      <td>...</td>\n      <td>One</td>\n      <td>42</td>\n      <td>1873.0</td>\n      <td>18618</td>\n      <td>18</td>\n      <td>21</td>\n      <td>Outside_Top_10</td>\n      <td>raikkonen</td>\n      <td>max_verstappen</td>\n      <td>max_verstappen</td>\n    </tr>\n    <tr>\n      <th>2481</th>\n      <td>2021</td>\n      <td>22</td>\n      <td>1073</td>\n      <td>24</td>\n      <td>20</td>\n      <td>0.0</td>\n      <td>20</td>\n      <td>0</td>\n      <td>Mechanical_Issue</td>\n      <td>haas</td>\n      <td>...</td>\n      <td>Not Available</td>\n      <td>22</td>\n      <td>0.0</td>\n      <td>1008</td>\n      <td>0</td>\n      <td>0</td>\n      <td>Outside_Top_10</td>\n      <td>mazepin</td>\n      <td>max_verstappen</td>\n      <td>max_verstappen</td>\n    </tr>\n  </tbody>\n</table>\n<p>2482 rows × 21 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf.drop(['raceId', 'circuitId', 'points', 'grid',\n       'laps', 'cumulative_points', 'cumulative_laps', 'pole_history', 'win_history'], axis=1, inplace=True)\n```\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfor i in range(len(df)):\n    \n    for col in df.columns:\n        \n        df[col][i] = col + '_' + str(df[col][i])\n```\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nrecords = []\nfor i in range(len(df)):\n    records.append([str(df.values[i,j]) for j in range(0, 12)])\n```\n:::\n\n\n# Association Rule Mining\n- At this critical juncture, the dependency on data for driving business decisions has increased to a great extent. Data Mining is one such method that helps in decision making. It is the process of deriving trends, patterns, and useful information from a massive amount of data. The data mining process of discovering the rules that govern associations and causal objects between sets of items is known as Association Rule Mining. It helps in discovering relationships between databases that seem to be independent thus developing connections between datasets.\n- `Association Rule Mining` (ARM) is a technique for identifying frequent patterns, correlations, associations, or causal structures in data sets found in a variety of databases, including relational databases, transactional databases, and other types of data repositories.\n- Since most machine learning algorithms work with numerical datasets, they are mathematical in nature. But, Association Rule Mining is appropriate for non-numeric, categorical data and requires a little more than simple counting.\n- Given a set of transactions, the goal of association rule mining is to find the rules that allow us to predict the occurrence of a specific item based on the occurrences of the other items in the transaction.\n- An association rule consists of two parts:\n    - an antecedent (if) and\n    - a consequent (then)\n- An antecedent is something found in data, and a consequent is something located in conjunction with the antecedent.\n- `Basic Definitions:`\n    - Support Count(σ):  It accounts for the frequency of occurrence of an itemset.<br>\n    - Frequent Itemset: It represents an itemset whose support is greater than or equal to the minimum threshold.\n    - Association Rule: It represents an implication expression of the form X -> Y. Here X and Y represent any 2 itemsets.<br>\n    Example: {Milk, Diaper}->{Beer} \n- `Rule Evaluation Metrics:`\n    - Support(s): It is the number of transactions that include items from the {X} and {Y} parts of the rule as a percentage of total transactions. It can be represented in the form of a percentage of all transactions that shows how frequently a group of items occurs together.\n    - Support = σ(X+Y) ÷ total: It is a fraction of transactions that include both X and Y. \n    - Confidence(c): This ratio represents the total number of transactions of all of the items in {A} and {B} to the number of transactions of the items in {A}.\n    - Conf(X=>Y) = Supp(X∪Y) ÷ Supp(X): It counts the number of times each item in Y appears in transactions that also include items in X.\n    - Lift(l): The lift of the rule X=>Y is the confidence of the rule divided by the expected confidence. here, it is assumed that the itemsets X and Y are independent of one another. The expected confidence is calculated by dividing the confidence by the frequency of {Y}.\n    - Lift(X=>Y) = Conf(X=>Y) ÷ Supp(Y): Lift values near 1 indicate that X and Y almost always appear together as expected. Lift values greater than 1 indicate that they appear together more than expected, and lift values less than 1 indicate that they appear less than expected. Greater lift values indicate a more powerful association.\n- `Algorithms of Association Rule Mining:`\n    - **Apriori Algorithm:**<br>\n    It delivers by characteristic the foremost frequent individual things within the information and increasing them to larger and bigger item sets as long as those item sets seem ofttimes enough within the information. The common itemsets ensured by apriori also are accustomed make sure association rules that highlight trends within the information. It counts the support of item sets employing a breadth-first search strategy and a candidate generation perform that takes advantage of the downward closure property of support.\n    - **Eclat Algorithm:**<br>\n    Eclat denotes equivalence class transformation. The set intersection was supported by its depth-first search formula. It’s applicable for each successive and parallel execution with spot-magnifying properties. This can be the associate formula for frequent pattern mining supported by the item set lattice’s depth-first search cross.\n        1. It is a DFS cross of the prefix tree rather than a lattice.\n        2. For stopping, the branch and a specific technique are used.\n    - **FP-growth Algorithm:**<br>\n    This algorithm is also called a recurring pattern. The FP growth formula is used for locating frequent item sets terribly dealings data but not for candidate generation.\n    This was primarily designed to compress the database that provides frequent sets and then divides the compressed data into conditional database sets.\n    This conditional database is associated with a frequent set. Each database then undergoes the process of data mining.The data source is compressed using the FP-tree data structure.\n    This algorithm operates in two stages. These are as follows:\n        1. FP-tree construction\n        2. Extract frequently used itemsets\n- `Applications:`\n    - Market-Basket Analysis:<br>\n    In most supermarkets, data is collected using barcode scanners. This database is called the “market basket” database. It contains a large number of past transaction records. Every record contains the name of all the items each customer purchases in one transaction. From this data, the stores come to know the inclination and choices of items of the customers. And according to this information, they decide the store layout and optimize the cataloging of different items.\n    - Medical Diagnosis:<br>\n    Association rules in medical diagnosis can help physicians diagnose and treat patients. Diagnosis is a difficult process with many potential errors that can lead to unreliable results. You can use relational association rule mining to determine the likelihood of illness based on various factors and symptoms. This application can be further expanded using some learning techniques on the basis of symptoms and their relationships in accordance with diseases.\n    - Census Data:<br>\n    The concept of Association Rule Mining is also used in dealing with the massive amount of census data. If properly aligned, this information can be used in planning efficient public services and businesses. \n- `Drawbacks:`\n    - A lengthy procedure of obtaining monotonous rules.\n    - Having a large number of discovered rules.\n    - Low performance of the Association Rule algorithms.\n    - Consideration of a lot of parameters for obtaining the rules. \n\n\n\n\n\n\n\n\n\n## Apriori Algorithm\n- There are 3 ways to measure association:\n    - Support: It gives the fraction of transactions which contains item A and B. Basically Support tells us about the frequently bought items or the combination of items bought frequently. So with this, we can filter out the items that have a low frequency.\n    $$Support = \\frac {freq(A,B)}{N}$$\n    - Confidence: It tells us how often the items A and B occur together, given the number times A occurs. Typically, when you work with the Apriori Algorithm, you define these terms accordingly. But how do you decide the value? Honestly, there isn’t a way to define these terms. Suppose you’ve assigned the support value as 2. What this means is, until and unless the item/s frequency is not 2%, you will not consider that item/s for the Apriori algorithm. This makes sense as considering items that are bought less frequently is a waste of time. Now suppose, after filtering you still have around 5000 items left. Creating association rules for them is a practically impossible task for anyone. This is where the concept of lift comes into play.\n    $$Confidence = \\frac {freq(A,B)}{freq(A)}$$\n    - Lift: Lift indicates the strength of a rule over the random occurrence of A and B. It basically tells us the strength of any rule. Focus on the denominator, it is the probability of the individual support values of A and B and not together. Lift explains the strength of a rule. More the Lift more is the strength. Let’s say for A -> B, the lift value is 4. It means that if you buy A the chances of buying B is 4 times.\n    $$Lift = \\frac {Support}{Supp(A) * Supp(B)}$$\n- Apriori algorithm uses frequent itemsets to generate association rules. It is based on the concept that a subset of a frequent itemset must also be a frequent itemset. Frequent Itemset is an itemset whose support value is greater than a threshold value(support).\n- Given a threshold C, the Apriori algorithm identifies the item sets which are subsets of at least C transactions in the database.\n- Apriori uses a \"bottom up\" approach, where frequent subsets are extended one item at a time (a step known as candidate generation), and groups of candidates are tested against the data. The algorithm terminates when no further successful extensions are found.\n- Apriori uses breadth-first search and a Hash tree structure to count candidate item sets efficiently. It generates candidate item sets of length k from item sets of length k-1. Then it prunes the candidates which have an infrequent sub pattern. According to the downward closure lemma, the candidate set contains all frequent k-length item sets. After that, it scans the transaction database to determine frequent item sets among the candidates.\n- `Steps of the Apriori algorithm:`\n    1. Computing the support for each individual item.\n    2. Deciding on the support threshold.\n    3. Selecting the frequent items.\n    4. Finding the support of the frequent itemsets.\n    5. Repeat for larger sets.\n    6. Generate Association Rules and compute confidence.\n    7. Compute lift.\n\nRunning the apriori algorithm for min_support=0.05, min_confidence=0.2, min_lift=2, min_length=2 :\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nassociation_rules = apriori(records, min_support=0.05, min_confidence=0.2, min_lift=2, min_length=2)\nassociation_results = list(association_rules)\n```\n:::\n\n\nOutputting the results:\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nfor item in association_results:\n    \n    # first index of the inner list\n    # Contains base item and add item\n    pair = item[0] \n    items = [x for x in pair]\n    print(\"Rule: \" + items[0] + \" -> \" + items[1])\n    \n    #second index of the inner list\n    print(\"Support: \" + str(item[1]))\n    \n    #third index of the list located at 0th\n    #of the third index of the inner list\n\n    print(\"Confidence: \" + str(item[2][0][2]))\n    print(\"Lift: \" + str(item[2][0][3]))\n    print(\"=====================================\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRule: label_Podium -> constructorRef_mercedes\nSupport: 0.06809024979854955\nConfidence: 0.6926229508196721\nLift: 4.696967661023022\n=====================================\nRule: status_Finished -> label_Podium\nSupport: 0.14746172441579372\nConfidence: 1.0\nLift: 2.135972461273666\n=====================================\nRule: pole_driverRef_leclerc -> season_2019\nSupport: 0.05640612409347301\nConfidence: 0.7777777777777778\nLift: 4.596296296296296\n=====================================\nRule: season_2021 -> pole_driverRef_max_verstappen\nSupport: 0.08058017727639001\nConfidence: 0.7692307692307693\nLift: 4.33916083916084\n=====================================\nRule: weather_Sunny -> pole_driverRef_max_verstappen\nSupport: 0.072522159548751\nConfidence: 0.6923076923076923\nLift: 2.0263062409288826\n=====================================\nRule: win_driverRef_max_verstappen -> pole_driverRef_max_verstappen\nSupport: 0.072522159548751\nConfidence: 0.6923076923076923\nLift: 4.274397244546498\n=====================================\nRule: pole_driverRef_rosberg -> season_2016\nSupport: 0.07091055600322321\nConfidence: 1.0\nLift: 5.372294372294372\n=====================================\nRule: win_driverRef_rosberg -> pole_driverRef_rosberg\nSupport: 0.0531829170024174\nConfidence: 0.7499999999999999\nLift: 9.40151515151515\n=====================================\nRule: weather_Windy -> season_2016\nSupport: 0.088638195004029\nConfidence: 0.47619047619047616\nLift: 3.4761904761904763\n=====================================\nRule: win_driverRef_rosberg -> season_2016\nSupport: 0.07977437550362611\nConfidence: 0.4285714285714286\nLift: 5.372294372294372\n=====================================\nRule: season_2018 -> weather_Not Available\nSupport: 0.10475423045930701\nConfidence: 0.6190476190476191\nLift: 3.4919913419913424\n=====================================\nRule: season_2021 -> win_driverRef_max_verstappen\nSupport: 0.08058017727639001\nConfidence: 0.4545454545454546\nLift: 2.806422433288105\n=====================================\nRule: status_Mechanical_Issue -> stop_Not Available\nSupport: 0.05962933118452861\nConfidence: 0.37279596977329976\nLift: 4.794194802991347\n=====================================\nRule: win_driverRef_rosberg -> weather_Windy\nSupport: 0.0531829170024174\nConfidence: 0.38823529411764707\nLift: 4.866666666666667\n=====================================\nRule: status_Finished -> label_Podium\nSupport: 0.06809024979854955\nConfidence: 0.6926229508196721\nLift: 4.696967661023022\n=====================================\nRule: status_Mechanical_Issue -> pole_driverRef_hamilton\nSupport: 0.08017727639000806\nConfidence: 0.5012594458438288\nLift: 2.2058970648659275\n=====================================\nRule: weather_Not Available -> label_Outside_Top_10\nSupport: 0.052377115229653506\nConfidence: 0.30952380952380953\nLift: 3.4919913419913424\n=====================================\nRule: status_Mechanical_Issue -> label_Outside_Top_10\nSupport: 0.05962933118452861\nConfidence: 0.37279596977329976\nLift: 5.083953829545769\n=====================================\nRule: pole_driverRef_hamilton -> label_Podium\nSupport: 0.0652699435938759\nConfidence: 0.44262295081967207\nLift: 2.2104429857835535\n=====================================\nRule: status_Finished -> label_Podium\nSupport: 0.07131345688960515\nConfidence: 0.4836065573770491\nLift: 2.6037125280039826\n=====================================\nRule: status_Finished -> weather_Sunny\nSupport: 0.05076551168412571\nConfidence: 0.3442622950819672\nLift: 2.163187383274538\n=====================================\nRule: status_Finished -> win_driverRef_hamilton\nSupport: 0.072522159548751\nConfidence: 0.4918032786885246\nLift: 2.2073340645658552\n=====================================\nRule: pole_driverRef_hamilton -> weather_Windy\nSupport: 0.0531829170024174\nConfidence: 0.2857142857142857\nLift: 3.6934523809523805\n=====================================\nRule: pole_driverRef_hamilton -> season_2018\nSupport: 0.05640612409347301\nConfidence: 0.3333333333333333\nLift: 4.5962962962962965\n=====================================\nRule: win_driverRef_max_verstappen -> season_2021\nSupport: 0.05640612409347301\nConfidence: 0.5384615384615384\nLift: 6.682307692307692\n=====================================\nRule: win_driverRef_rosberg -> pole_driverRef_rosberg\nSupport: 0.0531829170024174\nConfidence: 0.7499999999999999\nLift: 9.40151515151515\n=====================================\nRule: win_driverRef_rosberg -> weather_Windy\nSupport: 0.0531829170024174\nConfidence: 0.2857142857142857\nLift: 5.372294372294372\n=====================================\nRule: stop_One -> season_2018\nSupport: 0.06647864625302176\nConfidence: 0.39285714285714285\nLift: 4.131658595641646\n=====================================\nRule: win_driverRef_hamilton -> season_2018\nSupport: 0.05640612409347301\nConfidence: 0.3333333333333333\nLift: 4.136666666666667\n=====================================\nRule: pole_driverRef_hamilton -> win_driverRef_hamilton\nSupport: 0.08783239323126511\nConfidence: 0.3865248226950355\nLift: 2.085553499845822\n=====================================\nRule: win_driverRef_hamilton -> pole_driverRef_hamilton\nSupport: 0.06970185334407736\nConfidence: 0.4576719576719577\nLift: 2.054144301883904\n=====================================\n```\n:::\n:::\n\n\n### Helper Functions\n- **reformat_results**: Reformats the results from the apriori algorithm into a dataframe with itemsets, support, confidence and lift values.\n- **convert_to_network**: Converts the apriori dataframe into a Network Graph.\n- **plot_network**: Visualisation of the Network Graph.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndef reformat_results(results):\n\n    #CLEAN-UP RESULTS \n    keep=[]\n    for i in range(0,len(results)):\n        for j in range(0,len(list(results[i]))):\n            # print(results)\n            if(j>1):\n                for k in range(0,len(list(results[i][j]))):\n                    if(len(results[i][j][k][0])!=0):\n                        #print(len(results[i][j][k][0]),results[i][j][k][0])\n                        rhs=list(results[i][j][k][0])\n                        lhs=list(results[i][j][k][1])\n                        conf=float(results[i][j][k][2])\n                        lift=float(results[i][j][k][3])\n                        keep.append([rhs,lhs,supp,conf,supp*conf,lift])\n                        # keep.append()\n            if(j==1):\n                supp=results[i][j]\n\n    return pd.DataFrame(keep, columns =[\"rhs\",\"lhs\",\"supp\",\"conf\",\"supp x conf\",\"lift\"])\n```\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndef convert_to_network(df):\n    #print(df)\n\n    #BUILD GRAPH\n    G = nx.DiGraph()  # DIRECTED\n    for row in df.iterrows():\n        # for column in df.columns:\n        lhs=\"_\".join(row[1][0])\n        rhs=\"_\".join(row[1][1])\n        conf=row[1][3]; #print(conf)\n        if(lhs not in G.nodes): \n            G.add_node(lhs)\n        if(rhs not in G.nodes): \n            G.add_node(rhs)\n\n        edge=(lhs,rhs)\n        if edge not in G.edges:\n            G.add_edge(lhs, rhs, weight=conf)\n\n    # print(G.nodes)\n    # print(G.edges)\n    return G\n```\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndef plot_network(G):\n    #SPECIFIY X-Y POSITIONS FOR PLOTTING\n    pos=nx.planar_layout(G)\n\n    #GENERATE PLOT\n    fig, ax = plt.subplots()\n    fig.set_size_inches(45, 45)\n\n    #assign colors based on attributes\n    weights_e \t= [G[u][v]['weight'] for u,v in G.edges()]\n\n    #SAMPLE CMAP FOR COLORS \n    cmap=plt.cm.get_cmap('Blues')\n    colors_e \t= [cmap(G[u][v]['weight']*10) for u,v in G.edges()]\n\n    #PLOT\n    nx.draw(\n    G,\n    node_color='crimson',\n    edgecolors=\"black\",\n    edge_color=colors_e,\n    node_size=7000,\n    linewidths=2,\n    font_size=12,\n    font_color=\"black\",\n    width=weights_e,\n    with_labels=True,\n    pos=pos,\n    ax=ax\n    )\n    ax.set_title(\"NetworkX Graph for Association Rules\", fontsize=50)\n    \n    plt.show()\n\n# raise\n```\n:::\n\n\n### Final Reformatting and Plotting\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nresult_df = reformat_results(association_results)\nprint(\"Results\\n\",len(association_results))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nResults\n 31\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nG = convert_to_network(result_df)\nplot_network(G)\n```\n\n::: {.cell-output .cell-output-display}\n![](ARM_files/figure-html/cell-20-output-1.png){width=3367 height=3408}\n:::\n:::\n\n\n# Conclusion\n\n- There are a lot of interesting relations from the rules than can be seen from the network graph.\n- Suppose if the weather is windy, the season is 2016 and Rosberg is on the pole (1st in the starting grid), it is highly likely that he will get Top 3 (Podium) in the race.\n- And if the status of the race is Lapped and Hamilton has won the race, it most likely the position that a driver got is Outside Top 10.\n- For the season 2021, if Max Verstappen is on the pole and the weather conditions are Sunny, it is likely that he will win that race.\n- There are many more conclusions that can be drawn by seeing the graph.\n\n",
    "supporting": [
      "ARM_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}